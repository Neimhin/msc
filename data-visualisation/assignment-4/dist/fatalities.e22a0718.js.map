{"version":3,"sources":["../../ts/fatalities.ts"],"names":[],"mappings":"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","file":"fatalities.e22a0718.js","sourceRoot":"..","sourcesContent":["const config = {\n    test: true,\n    scrubber: {\n        height: 5,\n        width: 300,\n    }\n}\n\n\nexport interface Fatality {\n    name: string;\n    date_of_event: string;\n    age: number;\n    citizenship: string;\n    event_location: string;\n    event_location_district: string;\n    event_location_region: string;\n    date_of_death: string;\n    gender: string;\n    took_part_in_the_hostilities?: any;\n    place_of_residence: string;\n    place_of_residence_district: string;\n    type_of_injury: string;\n    ammunition: string;\n    killed_by: string;\n    notes: string;\n    parsed_date: Date;\n    parsed_date_ms: number;\n}\n\nconst ONE_DAY_MS = 24 * 60 * 60 * 1000;\n\nclass TimeInterval{\n    start: number;\n    end: number;\n    start_noon: number;\n    end_noon: number;\n    elapsed_noons: number[];\n    constructor(end: number, length: number) {\n        this.start = end - length;\n        this.end = end;\n        if(this.start > this.end) throw Error(\"can't have start after end\")\n        this.start_noon = get_noon_epoch_time(this.start);\n        this.end_noon = get_noon_epoch_time(this.end);\n        if(this.end_noon > this.end) {\n            this.end_noon = this.end_noon - ONE_DAY_MS;\n        }\n        this.elapsed_noons = [];\n        if(this.start <= this.start_noon && this.end >= this.start_noon) {\n            this.elapsed_noons.push(this.start_noon);\n        }\n        let current_noon = this.start_noon + ONE_DAY_MS;\n        while(current_noon <= this.end_noon) {\n            this.elapsed_noons.push(current_noon);\n            current_noon = current_noon + ONE_DAY_MS;\n        }\n    }\n}\n\nfunction interval_to_data(data: Map<number,Fatality[]>, interval: TimeInterval): Fatality[] {\n    let fatalities: Fatality[] = [];\n    for(const noon of interval.elapsed_noons) {\n        const new_noons = data.get(noon);\n        if(new_noons instanceof Array) {\n            fatalities.push(...new_noons);\n        }\n    }\n    return fatalities;\n}\n\nfunction on_response(response: Response) {\n    if(!response.ok) {\n        throw new Error(\"failed to fetch data\")\n    }\n    return response.json()\n}\n\nfunction assert_non_null<T>(item: T|null): T {\n    if(item === null) {\n        throw new Error(\"found null item\");\n    }\n    return item as T;\n}\n\nfunction parse_date(str: string): Date {\n    return assert_non_null(d3.timeParse(\"%Y-%m-%d\")(str))\n}\n\nfunction create_thresholds(startDate: Date, endDate: Date, days: number) {\n    const thresholds = [startDate];\n    let currentDate = new Date(startDate);\n    while (currentDate <= endDate) {\n        currentDate = new Date(currentDate.getTime() + days * 86400000); // Add 'days' days\n        thresholds.push(currentDate);\n    }\n    return thresholds;\n}\n\nfunction days_to_ms(days: number): number{\n    return days * days_to_ms.factor;\n}\n\ndays_to_ms.factor = 24 * 60 * 60 * 1000;\n\nfunction ms_to_days(ms: number): number {\n    return ms / days_to_ms.factor\n}\n\nfunction get_noon_epoch_time(milliseconds: number) {\n    let date = new Date(milliseconds);\n    date.setHours(12, 0, 0, 0);\n    return date.getTime();\n}\n\nfunction yeet(error_msg:string) {\n    throw new Error(error_msg);\n}\n\nconst debug = {\n    noon_times(noon_time_to_fatalities: Map<number, Fatality[]>) {\n        for(const k of noon_time_to_fatalities.keys()) {\n            console.log(new Date(k));\n        }\n\n    }\n}\n\nexport function on_data(data: [Fatality]){\n    d3.select(\"#vis\").selectAll(\"*\").remove()\n    const width = window.innerWidth * 0.9;\n    const height = Number(window.innerHeight) * 0.95;\n    const margin = {top: 200, right: 20, bottom: 20, left: 20};\n    const histogram_center = 300;\n    const histogram_height = 100;\n    const noon_time_to_fatalities = new Map<number, Fatality[]>();\n    data.forEach(d => {\n        d.parsed_date = parse_date(d.date_of_death);\n        d.parsed_date.setHours(12,0,0,0);\n        d.parsed_date_ms = d.parsed_date.getTime();\n        const fatalities_list = noon_time_to_fatalities.get(d.parsed_date_ms);\n        if(fatalities_list) {\n            fatalities_list.push(d);\n        }\n        else {\n            noon_time_to_fatalities.set(d.parsed_date_ms, [d])\n        }\n    });\n    debug.noon_times(noon_time_to_fatalities);\n    data.sort((a, b) => a.parsed_date_ms - b.parsed_date_ms);\n    const israeli_deaths = data.filter(d => d.citizenship === \"Israeli\");\n    const palestinian_deaths = data.filter(d => d.citizenship === \"Palestinian\")\n\n    const svg = d3.select('#vis')\n    .append('svg')\n    .attr('width', width)\n    .attr('height', height)\n    .append(\"g\")\n    .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    const scrubber = svg.append('rect')\n        .attr('x', 0)\n        .attr('y', histogram_center)\n        .attr('width', config.scrubber.width)\n        .attr('height', config.scrubber.height)\n        .attr('opacity',0.3)\n        .attr('stroke', 'white  ');\n\n    const dateRange = d3.extent(data, d => d.parsed_date );\n    const time_zero = dateRange[0].getTime();\n    const totalMilliseconds = dateRange[1].getTime() - time_zero;\n    const totalDays = ms_to_days(totalMilliseconds);\n    const histogram_width = width - margin.left - margin.right;\n    const pixelsPerDay = histogram_width / totalDays;\n    const daysPerSecond = 31; // 365 * 5;\n    const days_data_per_ms_real = daysPerSecond / 1000;\n    const ms_data_per_ms_real = days_to_ms(days_data_per_ms_real);\n    const animationDuration = (totalDays/days_data_per_ms_real);\n    const framesPerSecond = 60;\n    const frames_per_ms = 1000/framesPerSecond;\n    const pixelsPerTick = pixelsPerDay * daysPerSecond / framesPerSecond;\n\n    const x = d3.scaleTime()\n        .domain(dateRange)\n        .range([0, histogram_width]);\n\n    const padding_time = widthToMilliseconds(config.scrubber.width);\n\n    const scrub_x = d3.scaleTime()\n        .domain([time_zero - padding_time, dateRange[1].getTime()])\n        .range([-config.scrubber.width, histogram_width])\n        .clamp(false);\n\n    const totalWidthMilliseconds = totalMilliseconds + padding_time;\n    function widthToMilliseconds(widthInPixels: number) {\n        const oneDayPixelValue = x(new Date(time_zero + days_to_ms(1)));\n        const days = widthInPixels / oneDayPixelValue;\n        return days * (1000 / days_data_per_ms_real);\n    }\n\n    function ms_change_real_to_ms_change_data(ms_real: number) {\n        return ms_real * ms_data_per_ms_real;\n    }\n\n    let elapsed_last = 0;\n    function histogram_tick(elapsed: number) {\n        const elapsed_diff = elapsed - elapsed_last;\n        const looped_epoch_time = (elapsed * ms_data_per_ms_real) % totalWidthMilliseconds;\n        const current_time_right_ms = time_zero + looped_epoch_time;\n        const current_time_left_ms = current_time_right_ms - padding_time;\n        const scenario_elapsed = ms_change_real_to_ms_change_data(elapsed_diff);\n        const new_data_interval = new TimeInterval(current_time_right_ms, scenario_elapsed);\n        const new_data = interval_to_data(noon_time_to_fatalities, new_data_interval);\n        //console.log(elapsed, scenario_elapsed, new_data_interval);\n        if(new_data_interval.elapsed_noons.length > 0) {\n            // console.log(\"Elapsed noons:\", new_data, new_data_interval);\n            // console.log(noon_time_to_fatalities[new_data_interval.elapsed_noons[0]])\n        }\n        const x_val = scrub_x(current_time_left_ms);\n        const real_x = d3.max([0,x_val]) || 0;\n        const subtraction_left = d3.min([x_val,0]) || 0;\n        const width = d3.min([config.scrubber.width,histogram_width-real_x]) + subtraction_left;\n        scrubber\n            .attr('x', real_x)\n            .attr('width', width)\n\n        elapsed_last = elapsed;\n    }\n\n    d3.interval(histogram_tick,frames_per_ms)\n\n    const xAxis = svg.append(\"g\")\n        .attr(\"transform\", `translate(0,${margin.top})`)\n\n    const thresholds = create_thresholds(dateRange[0],dateRange[1], 14)\n    const histogram = d3.bin()\n        .value(d => d.parsed_date)\n        .domain(x.domain())\n        .thresholds(thresholds)\n\n    const israeli_bins = histogram(israeli_deaths);\n    const palestinian_bins = histogram(palestinian_deaths)\n\n    const y_range = height - margin.top - margin.bottom;\n\n    const rect_height = d3.scaleLinear()\n        .range([histogram_height,0])\n        // use the max of both israeli and palestinian deaths so both are on the same scale\n        .domain([d3.max(histogram(data), d => d.length), 0]);\n\n    function bin_width(d) {\n        return Math.max(0, x(d.x1) - x(d.x0));\n    }\n\n    svg.selectAll(\"rect\")\n        .data(israeli_bins)\n        .enter()\n        .append(\"rect\")\n        .attr(\"x\", d => x(d.x0))\n        .attr(\"y\", d => histogram_center + config.scrubber.height)\n        .attr(\"width\", d => bin_width(d))\n        .attr(\"height\", d => rect_height(d.length))\n        .style(\"fill\", \"#0038b8\");\n\n    svg.selectAll(\".palestinian-rect\")\n        .data(palestinian_bins)\n        .enter()\n        .append(\"rect\")\n        .attr(\"class\", \"palestinian-rect\")\n        .attr(\"x\", d => x(d.x0))\n        .attr(\"y\", d => histogram_center - rect_height(d.length))\n        .attr(\"width\", d => bin_width(d))\n        .attr(\"height\", d => rect_height(d.length))\n        .style(\"fill\", \"#EE2A35\");\n\n}\n\nfetch('/static/json/fatalities.json')\n    .then(on_response)\n    .then(on_data)"]}